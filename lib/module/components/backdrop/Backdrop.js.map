{"version":3,"sources":["Backdrop.tsx"],"names":["React","memo","StyleSheet","Animated","useAnimatedGestureHandler","useAnimatedProps","useAnimatedStyle","withDelay","withTiming","TapGestureHandler","BlurView","styles","CONTEXT_MENU_STATE","HOLD_ITEM_TRANSFORM_DURATION","WINDOW_HEIGHT","BACKDROP_LIGHT_BACKGROUND_COLOR","BACKDROP_DARK_BACKGROUND_COLOR","useInternal","AnimatedBlurView","createAnimatedComponent","BackdropComponent","blurViewIntensity","backdropDarkBackgroundColor","backdropLightBackgroundColor","state","theme","tapGestureEvent","onStart","event","context","startPosition","x","y","onCancel","value","END","onEnd","distance","Math","hypot","shouldClose","isStateActive","ACTIVE","animatedContainerStyle","topValueAnimation","duration","opacityValueAnimation","top","opacity","animatedContainerProps","intensity","animatedInnerContainerStyle","backgroundColor","container","absoluteFillObject","Backdrop"],"mappings":"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","sourcesContent":["import React, { memo } from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport Animated, {\r\n  useAnimatedGestureHandler,\r\n  useAnimatedProps,\r\n  useAnimatedStyle,\r\n  withDelay,\r\n  withTiming,\r\n} from \"react-native-reanimated\";\r\nimport {\r\n  TapGestureHandler,\r\n  TapGestureHandlerGestureEvent,\r\n} from \"react-native-gesture-handler\";\r\n\r\n// Components\r\nimport { BlurView } from \"expo-blur\";\r\n\r\n// Utils\r\nimport { styles } from \"./styles\";\r\nimport {\r\n  CONTEXT_MENU_STATE,\r\n  HOLD_ITEM_TRANSFORM_DURATION,\r\n  WINDOW_HEIGHT,\r\n} from \"../../constants\";\r\nimport {\r\n  BACKDROP_LIGHT_BACKGROUND_COLOR,\r\n  BACKDROP_DARK_BACKGROUND_COLOR,\r\n} from \"./constants\";\r\nimport { useInternal } from \"../../hooks\";\r\nimport { BackdropProps } from \"../provider/types\";\r\n\r\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\r\n\r\ntype Context = {\r\n  startPosition: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n};\r\n\r\nconst BackdropComponent = ({\r\n  blurViewIntensity = 100,\r\n  backdropDarkBackgroundColor = BACKDROP_DARK_BACKGROUND_COLOR,\r\n  backdropLightBackgroundColor = BACKDROP_LIGHT_BACKGROUND_COLOR,\r\n}: BackdropProps) => {\r\n  const { state, theme } = useInternal();\r\n\r\n  const tapGestureEvent = useAnimatedGestureHandler<\r\n    TapGestureHandlerGestureEvent,\r\n    Context\r\n  >(\r\n    {\r\n      onStart: (event, context) => {\r\n        context.startPosition = { x: event.x, y: event.y };\r\n      },\r\n      onCancel: () => {\r\n        state.value = CONTEXT_MENU_STATE.END;\r\n      },\r\n      onEnd: (event, context) => {\r\n        const distance = Math.hypot(\r\n          event.x - context.startPosition.x,\r\n          event.y - context.startPosition.y\r\n        );\r\n        const shouldClose = distance < 10;\r\n        const isStateActive = state.value === CONTEXT_MENU_STATE.ACTIVE;\r\n\r\n        if (shouldClose && isStateActive) {\r\n          state.value = CONTEXT_MENU_STATE.END;\r\n        }\r\n      },\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const animatedContainerStyle = useAnimatedStyle(() => {\r\n    const topValueAnimation = () =>\r\n      state.value === CONTEXT_MENU_STATE.ACTIVE\r\n        ? 0\r\n        : withDelay(\r\n            HOLD_ITEM_TRANSFORM_DURATION,\r\n            withTiming(WINDOW_HEIGHT, {\r\n              duration: 0,\r\n            })\r\n          );\r\n\r\n    const opacityValueAnimation = () =>\r\n      withTiming(state.value === CONTEXT_MENU_STATE.ACTIVE ? 1 : 0, {\r\n        duration: HOLD_ITEM_TRANSFORM_DURATION,\r\n      });\r\n\r\n    return {\r\n      top: topValueAnimation(),\r\n      opacity: opacityValueAnimation(),\r\n    };\r\n  });\r\n\r\n  const animatedContainerProps = useAnimatedProps(() => {\r\n    return {\r\n      intensity: withTiming(\r\n        state.value === CONTEXT_MENU_STATE.ACTIVE ? blurViewIntensity : 0,\r\n        {\r\n          duration: HOLD_ITEM_TRANSFORM_DURATION,\r\n        }\r\n      ),\r\n    };\r\n  });\r\n\r\n  const animatedInnerContainerStyle = useAnimatedStyle(() => {\r\n    const backgroundColor =\r\n      theme.value === \"light\"\r\n        ? backdropLightBackgroundColor\r\n        : backdropDarkBackgroundColor;\r\n\r\n    return { backgroundColor };\r\n  }, [theme]);\r\n\r\n  return (\r\n    <TapGestureHandler onHandlerStateChange={tapGestureEvent}>\r\n      <AnimatedBlurView\r\n        // @ts-ignore\r\n        tint=\"default\"\r\n        animatedProps={animatedContainerProps}\r\n        style={[styles.container, animatedContainerStyle]}\r\n      >\r\n        <Animated.View\r\n          style={[\r\n            { ...StyleSheet.absoluteFillObject },\r\n            animatedInnerContainerStyle,\r\n          ]}\r\n        />\r\n      </AnimatedBlurView>\r\n    </TapGestureHandler>\r\n  );\r\n};\r\n\r\nconst Backdrop = memo(BackdropComponent);\r\n\r\nexport default Backdrop;\r\n"]}