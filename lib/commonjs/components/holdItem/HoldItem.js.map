{"version":3,"sources":["HoldItem.tsx"],"names":["HoldItemComponent","items","bottom","containerStyles","disableMove","menuAnchorPosition","activateOn","hapticFeedback","actionParams","closeOnTap","children","state","menuProps","safeAreaInsets","deviceOrientation","isActive","isAnimationStarted","itemRectY","itemRectX","itemRectWidth","itemRectHeight","itemScale","transformValue","transformOrigin","key","menuHeight","itemsWithSeparator","filter","item","withSeparator","length","isHold","containerRef","hapticResponse","style","Haptics","selectionAsync","impactAsync","ImpactFeedbackStyle","notificationAsync","NotificationFeedbackType","activateAnimation","ctx","didMeasureLayout","measured","value","pageY","pageX","height","width","position","WINDOW_WIDTH","WINDOW_HEIGHT","calculateTransformValue","isAnchorPointTop","includes","tY","topTransform","styleGuide","spacing","bottomTransform","top","setMenuProps","itemHeight","itemWidth","itemY","itemX","anchorPosition","scaleBack","duration","HOLD_ITEM_TRANSFORM_DURATION","onCompletion","isFinised","isListValid","CONTEXT_MENU_STATE","ACTIVE","scaleHold","HOLD_ITEM_SCALE_DOWN_VALUE","HOLD_ITEM_SCALE_DOWN_DURATION","scaleTap","canCallActivateFunctions","willActivateWithTap","gestureEvent","onActive","_","context","onFinish","overlayGestureEvent","END","animatedContainerStyle","animateOpacity","opacity","transform","scale","containerStyle","React","useMemo","animatedPortalStyle","transformAnimation","SPRING_CONFIGURATION","zIndex","left","translateY","portalContainerStyle","styles","holdItem","animatedPortalProps","pointerEvents","_state","GestureHandler","handlerChildren","PortalOverlay","portalOverlay","HoldItem"],"mappings":"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","sourcesContent":["import React, { memo, useMemo } from \"react\";\r\nimport { ViewProps } from \"react-native\";\r\n\r\n//#region reanimated & gesture handler\r\nimport {\r\n  TapGestureHandler,\r\n  LongPressGestureHandler,\r\n  TapGestureHandlerGestureEvent,\r\n  LongPressGestureHandlerGestureEvent,\r\n} from \"react-native-gesture-handler\";\r\nimport Animated, {\r\n  measure,\r\n  runOnJS,\r\n  useAnimatedGestureHandler,\r\n  useAnimatedProps,\r\n  useAnimatedRef,\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n  withDelay,\r\n  withTiming,\r\n  withSequence,\r\n  withSpring,\r\n  useAnimatedReaction,\r\n} from \"react-native-reanimated\";\r\n//#endregion\r\n\r\n//#region dependencies\r\nimport { Portal } from \"@gorhom/portal\";\r\nimport { nanoid } from \"nanoid/non-secure\";\r\nimport * as Haptics from \"expo-haptics\";\r\n//#endregion\r\n\r\n//#region utils & types\r\nimport {\r\n  TransformOriginAnchorPosition,\r\n  getTransformOrigin,\r\n  calculateMenuHeight,\r\n} from \"../../utils/calculations\";\r\nimport {\r\n  HOLD_ITEM_TRANSFORM_DURATION,\r\n  HOLD_ITEM_SCALE_DOWN_DURATION,\r\n  HOLD_ITEM_SCALE_DOWN_VALUE,\r\n  SPRING_CONFIGURATION,\r\n  WINDOW_HEIGHT,\r\n  WINDOW_WIDTH,\r\n  CONTEXT_MENU_STATE,\r\n} from \"../../constants\";\r\nimport { useDeviceOrientation } from \"../../hooks\";\r\nimport styles from \"./styles\";\r\n\r\nimport type { HoldItemProps, GestureHandlerProps } from \"./types\";\r\nimport styleGuide from \"../../styleGuide\";\r\nimport { useInternal } from \"../../hooks\";\r\n//#endregion\r\n\r\ntype Context = { didMeasureLayout: boolean };\r\n\r\nconst HoldItemComponent = ({\r\n  items,\r\n  bottom,\r\n  containerStyles,\r\n  disableMove,\r\n  menuAnchorPosition,\r\n  activateOn,\r\n  hapticFeedback,\r\n  actionParams,\r\n  closeOnTap,\r\n  children,\r\n}: HoldItemProps) => {\r\n  //#region hooks\r\n  const { state, menuProps, safeAreaInsets } = useInternal();\r\n  const deviceOrientation = useDeviceOrientation();\r\n  //#endregion\r\n\r\n  //#region variables\r\n  const isActive = useSharedValue(false);\r\n  const isAnimationStarted = useSharedValue(false);\r\n\r\n  const itemRectY = useSharedValue<number>(0);\r\n  const itemRectX = useSharedValue<number>(0);\r\n  const itemRectWidth = useSharedValue<number>(0);\r\n  const itemRectHeight = useSharedValue<number>(0);\r\n  const itemScale = useSharedValue<number>(1);\r\n  const transformValue = useSharedValue<number>(0);\r\n\r\n  const transformOrigin = useSharedValue<TransformOriginAnchorPosition>(\r\n    menuAnchorPosition || \"top-right\"\r\n  );\r\n\r\n  const key = useMemo(() => `hold-item-${nanoid()}`, []);\r\n  const menuHeight = useMemo(() => {\r\n    const itemsWithSeparator = items.filter((item) => item.withSeparator);\r\n    return calculateMenuHeight(items.length, itemsWithSeparator.length);\r\n  }, [items]);\r\n\r\n  const isHold = !activateOn || activateOn === \"hold\";\r\n  //#endregion\r\n\r\n  //#region refs\r\n  const containerRef = useAnimatedRef<Animated.View>();\r\n  //#endregion\r\n\r\n  //#region functions\r\n  const hapticResponse = () => {\r\n    const style = !hapticFeedback ? \"Medium\" : hapticFeedback;\r\n    switch (style) {\r\n      case \"Selection\":\r\n        Haptics.selectionAsync();\r\n        break;\r\n      case \"Light\":\r\n      case \"Medium\":\r\n      case \"Heavy\":\r\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle[style]);\r\n        break;\r\n      case \"Success\":\r\n      case \"Warning\":\r\n      case \"Error\":\r\n        Haptics.notificationAsync(Haptics.NotificationFeedbackType[style]);\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n  //#endregion\r\n\r\n  //#region worklet functions\r\n  const activateAnimation = (ctx: any) => {\r\n    \"worklet\";\r\n    if (!ctx.didMeasureLayout) {\r\n      const measured = measure(containerRef);\r\n\r\n      itemRectY.value = measured.pageY;\r\n      itemRectX.value = measured.pageX;\r\n      itemRectHeight.value = measured.height;\r\n      itemRectWidth.value = measured.width;\r\n\r\n      if (!menuAnchorPosition) {\r\n        const position = getTransformOrigin(\r\n          measured.pageX,\r\n          itemRectWidth.value,\r\n          deviceOrientation === \"portrait\" ? WINDOW_WIDTH : WINDOW_HEIGHT,\r\n          bottom\r\n        );\r\n        transformOrigin.value = position;\r\n      }\r\n    }\r\n  };\r\n\r\n  const calculateTransformValue = () => {\r\n    \"worklet\";\r\n\r\n    const height =\r\n      deviceOrientation === \"portrait\" ? WINDOW_HEIGHT : WINDOW_WIDTH;\r\n\r\n    const isAnchorPointTop = transformOrigin.value.includes(\"top\");\r\n\r\n    let tY = 0;\r\n    if (!disableMove) {\r\n      if (isAnchorPointTop) {\r\n        const topTransform =\r\n          itemRectY.value +\r\n          itemRectHeight.value +\r\n          menuHeight +\r\n          styleGuide.spacing +\r\n          (safeAreaInsets?.bottom || 0);\r\n\r\n        tY = topTransform > height ? height - topTransform : 0;\r\n      } else {\r\n        const bottomTransform =\r\n          itemRectY.value - menuHeight - (safeAreaInsets?.top || 0);\r\n        tY =\r\n          bottomTransform < 0 ? -bottomTransform + styleGuide.spacing * 2 : 0;\r\n      }\r\n    }\r\n    return tY;\r\n  };\r\n\r\n  const setMenuProps = () => {\r\n    \"worklet\";\r\n\r\n    menuProps.value = {\r\n      itemHeight: itemRectHeight.value,\r\n      itemWidth: itemRectWidth.value,\r\n      itemY: itemRectY.value,\r\n      itemX: itemRectX.value,\r\n      anchorPosition: transformOrigin.value,\r\n      menuHeight: menuHeight,\r\n      items,\r\n      transformValue: transformValue.value,\r\n      actionParams: actionParams || {},\r\n    };\r\n  };\r\n\r\n  const scaleBack = () => {\r\n    \"worklet\";\r\n    itemScale.value = withTiming(1, {\r\n      duration: HOLD_ITEM_TRANSFORM_DURATION / 2,\r\n    });\r\n  };\r\n\r\n  const onCompletion = (isFinised?: boolean) => {\r\n    \"worklet\";\r\n    const isListValid = items && items.length > 0;\r\n    if (isFinised && isListValid) {\r\n      state.value = CONTEXT_MENU_STATE.ACTIVE;\r\n      isActive.value = true;\r\n      scaleBack();\r\n      if (hapticFeedback !== \"None\") {\r\n        runOnJS(hapticResponse)();\r\n      }\r\n    }\r\n\r\n    isAnimationStarted.value = false;\r\n\r\n    // TODO: Warn user if item list is empty or not given\r\n  };\r\n\r\n  const scaleHold = () => {\r\n    \"worklet\";\r\n    itemScale.value = withTiming(\r\n      HOLD_ITEM_SCALE_DOWN_VALUE,\r\n      { duration: HOLD_ITEM_SCALE_DOWN_DURATION },\r\n      onCompletion\r\n    );\r\n  };\r\n\r\n  const scaleTap = () => {\r\n    \"worklet\";\r\n    isAnimationStarted.value = true;\r\n\r\n    itemScale.value = withSequence(\r\n      withTiming(HOLD_ITEM_SCALE_DOWN_VALUE, {\r\n        duration: HOLD_ITEM_SCALE_DOWN_DURATION,\r\n      }),\r\n      withTiming(\r\n        1,\r\n        {\r\n          duration: HOLD_ITEM_TRANSFORM_DURATION / 2,\r\n        },\r\n        onCompletion\r\n      )\r\n    );\r\n  };\r\n\r\n  /**\r\n   * When use tap activation (\"tap\") and trying to tap multiple times,\r\n   * scale animation is called again despite it is started. This causes a bug.\r\n   * To prevent this, it is better to check is animation already started.\r\n   */\r\n  const canCallActivateFunctions = () => {\r\n    \"worklet\";\r\n    const willActivateWithTap =\r\n      activateOn === \"double-tap\" || activateOn === \"tap\";\r\n\r\n    return (\r\n      (willActivateWithTap && !isAnimationStarted.value) || !willActivateWithTap\r\n    );\r\n  };\r\n  //#endregion\r\n\r\n  //#region gesture events\r\n  const gestureEvent = useAnimatedGestureHandler<\r\n    LongPressGestureHandlerGestureEvent | TapGestureHandlerGestureEvent,\r\n    Context\r\n  >({\r\n    onActive: (_, context) => {\r\n      if (canCallActivateFunctions()) {\r\n        if (!context.didMeasureLayout) {\r\n          activateAnimation(context);\r\n          transformValue.value = calculateTransformValue();\r\n          setMenuProps();\r\n          context.didMeasureLayout = true;\r\n        }\r\n\r\n        if (!isActive.value) {\r\n          if (isHold) {\r\n            scaleHold();\r\n          } else {\r\n            scaleTap();\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onFinish: (_, context) => {\r\n      context.didMeasureLayout = false;\r\n      if (isHold) {\r\n        scaleBack();\r\n      }\r\n    },\r\n  });\r\n\r\n  const overlayGestureEvent = useAnimatedGestureHandler<\r\n    TapGestureHandlerGestureEvent,\r\n    Context\r\n  >({\r\n    onActive: (_) => {\r\n      if (closeOnTap) state.value = CONTEXT_MENU_STATE.END;\r\n    },\r\n  });\r\n  //#endregion\r\n\r\n  //#region animated styles & props\r\n  const animatedContainerStyle = useAnimatedStyle(() => {\r\n    const animateOpacity = () =>\r\n      withDelay(HOLD_ITEM_TRANSFORM_DURATION, withTiming(1, { duration: 0 }));\r\n\r\n    return {\r\n      opacity: isActive.value ? 0 : animateOpacity(),\r\n      transform: [\r\n        {\r\n          scale: isActive.value\r\n            ? withTiming(1, { duration: HOLD_ITEM_TRANSFORM_DURATION })\r\n            : itemScale.value,\r\n        },\r\n      ],\r\n    };\r\n  });\r\n  const containerStyle = React.useMemo(\r\n    () => [containerStyles, animatedContainerStyle],\r\n    [containerStyles, animatedContainerStyle]\r\n  );\r\n\r\n  const animatedPortalStyle = useAnimatedStyle(() => {\r\n    const animateOpacity = () =>\r\n      withDelay(HOLD_ITEM_TRANSFORM_DURATION, withTiming(0, { duration: 0 }));\r\n\r\n    let tY = calculateTransformValue();\r\n    const transformAnimation = () =>\r\n      disableMove\r\n        ? 0\r\n        : isActive.value\r\n        ? withSpring(tY, SPRING_CONFIGURATION)\r\n        : withTiming(-0.1, { duration: HOLD_ITEM_TRANSFORM_DURATION });\r\n\r\n    return {\r\n      zIndex: 10,\r\n      position: \"absolute\",\r\n      top: itemRectY.value,\r\n      left: itemRectX.value,\r\n      width: itemRectWidth.value,\r\n      height: itemRectHeight.value,\r\n      opacity: isActive.value ? 1 : animateOpacity(),\r\n      transform: [\r\n        {\r\n          translateY: transformAnimation(),\r\n        },\r\n        {\r\n          scale: isActive.value\r\n            ? withTiming(1, { duration: HOLD_ITEM_TRANSFORM_DURATION })\r\n            : itemScale.value,\r\n        },\r\n      ],\r\n    };\r\n  });\r\n  const portalContainerStyle = useMemo(\r\n    () => [styles.holdItem, animatedPortalStyle],\r\n    [animatedPortalStyle]\r\n  );\r\n\r\n  const animatedPortalProps = useAnimatedProps<ViewProps>(() => ({\r\n    pointerEvents: isActive.value ? \"auto\" : \"none\",\r\n  }));\r\n  //#endregion\r\n\r\n  //#region animated effects\r\n  useAnimatedReaction(\r\n    () => state.value,\r\n    (_state) => {\r\n      if (_state === CONTEXT_MENU_STATE.END) {\r\n        isActive.value = false;\r\n      }\r\n    }\r\n  );\r\n  //#endregion\r\n\r\n  //#region components\r\n  const GestureHandler = useMemo(() => {\r\n    switch (activateOn) {\r\n      case \"double-tap\":\r\n        return ({ children: handlerChildren }: GestureHandlerProps) => (\r\n          <TapGestureHandler\r\n            numberOfTaps={2}\r\n            onHandlerStateChange={gestureEvent}\r\n          >\r\n            {handlerChildren}\r\n          </TapGestureHandler>\r\n        );\r\n      case \"tap\":\r\n        return ({ children: handlerChildren }: GestureHandlerProps) => (\r\n          <TapGestureHandler\r\n            numberOfTaps={1}\r\n            onHandlerStateChange={gestureEvent}\r\n          >\r\n            {handlerChildren}\r\n          </TapGestureHandler>\r\n        );\r\n      // default is hold\r\n      default:\r\n        return ({ children: handlerChildren }: GestureHandlerProps) => (\r\n          <LongPressGestureHandler\r\n            minDurationMs={150}\r\n            onHandlerStateChange={gestureEvent}\r\n          >\r\n            {handlerChildren}\r\n          </LongPressGestureHandler>\r\n        );\r\n    }\r\n  }, [activateOn, gestureEvent]);\r\n\r\n  const PortalOverlay = useMemo(() => {\r\n    return () => (\r\n      <TapGestureHandler\r\n        numberOfTaps={1}\r\n        onHandlerStateChange={overlayGestureEvent}\r\n      >\r\n        <Animated.View style={styles.portalOverlay} />\r\n      </TapGestureHandler>\r\n    );\r\n  }, [overlayGestureEvent]);\r\n  //#endregion\r\n\r\n  //#region render\r\n  return (\r\n    <>\r\n      <GestureHandler>\r\n        <Animated.View ref={containerRef} style={containerStyle}>\r\n          {children}\r\n        </Animated.View>\r\n      </GestureHandler>\r\n\r\n      <Portal key={key} name={key}>\r\n        <Animated.View\r\n          key={key}\r\n          style={portalContainerStyle}\r\n          animatedProps={animatedPortalProps}\r\n        >\r\n          <PortalOverlay />\r\n          {children}\r\n        </Animated.View>\r\n      </Portal>\r\n    </>\r\n  );\r\n  //#endregion\r\n};\r\n\r\nconst HoldItem = memo(HoldItemComponent);\r\n\r\nexport default HoldItem;\r\n"]}