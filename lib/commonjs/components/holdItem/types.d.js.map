{"version":3,"names":[],"sources":["types.d.ts"],"sourcesContent":["import React from \"react\";\r\nimport { ViewStyle } from \"react-native\";\r\nimport { MenuItemProps } from \"../menu/types\";\r\nimport { TransformOriginAnchorPosition } from \"../../utils/calculations\";\r\n\r\nexport type HoldItemProps = {\r\n  /**\r\n   * List of context menu items.\r\n   * @type MenuItemProps[]\r\n   * @default []\r\n   */\r\n  items: MenuItemProps[];\r\n\r\n  /**\r\n   * Object of keys that same name with items to match parameters to onPress actions.\r\n   * @type { [name: string]: (string | number)[] }\r\n   * @examples\r\n   * ```js\r\n   * const items = [\r\n   *  {text: 'Reply', onPress: (messageId) => {}},\r\n   *  {text: 'Copy', onPress: (messageText) => {}},\r\n   * ]\r\n   * ...\r\n   * <HoldItem\r\n   *    items={items}\r\n   *    actionParams={{\r\n   *      Reply: ['dd443224-7f43'],\r\n   *      Copy: ['Hello World!']\r\n   *    }}\r\n   * ><View/></HoldItem>\r\n   * ```\r\n   */\r\n  actionParams?: {\r\n    [name: string]: any[];\r\n  };\r\n\r\n  children: React.ReactElement | React.ReactElement[] | React.ReactNode;\r\n\r\n  /**\r\n   * Menu anchor position is calculated automaticly.\r\n   * But you can override the calculation by passing an anchor position.\r\n   * @type TransformOriginAnchorPosition\r\n   * @examples\r\n   * menuAnchorPosition=\"top-bottom\"\r\n   */\r\n  menuAnchorPosition?: TransformOriginAnchorPosition;\r\n\r\n  /**\r\n   * Disables moving holded item\r\n   * @type boolean\r\n   * @default false\r\n   * @examples\r\n   * disableMove={true}\r\n   */\r\n  disableMove?: boolean;\r\n\r\n  /**\r\n   * HoldItem wrapper component styles.\r\n   * You may need for some examples like dynamic width or hight like message boxes.\r\n   * See Whatsapp example.\r\n   * @type ViewStyles\r\n   * @default {}\r\n   * @examples\r\n   * containerStyles={{ maxWidth: '80%' }}\r\n   */\r\n  containerStyles?: ViewStyle | ViewStyle[];\r\n\r\n  /**\r\n   * Theme for menu background and texts\r\n   * @type string\r\n   * @examples\r\n   * theme=\"light\"\r\n   */\r\n  theme?: \"light\" | \"dark\";\r\n\r\n  /**\r\n   * Set true if you want to open menu from bottom\r\n   * @type boolean\r\n   * @default false\r\n   * @examples\r\n   * bottom={true}\r\n   */\r\n  bottom?: boolean;\r\n\r\n  /**\r\n   * Set if you'd like a different tap activation\r\n   * @type string\r\n   * @default 'hold'\r\n   * @examples\r\n   * activateOn=\"hold\"\r\n   */\r\n  activateOn?: \"tap\" | \"double-tap\" | \"hold\";\r\n\r\n  /**\r\n   * Set if you'd like to enable haptic feedback on activation\r\n   * @type string\r\n   * @default 'Medium'\r\n   * @examples\r\n   * hapticFeedback=\"None\"\r\n   */\r\n  hapticFeedback?:\r\n    | \"None\"\r\n    | \"Selection\"\r\n    | \"Light\"\r\n    | \"Medium\"\r\n    | \"Heavy\"\r\n    | \"Success\"\r\n    | \"Warning\"\r\n    | \"Error\";\r\n\r\n  /**\r\n   * Set true if you want to close menu when tap to HoldItem\r\n   * @type boolean\r\n   * @default false\r\n   * @examples\r\n   * closeOnTap={true}\r\n   */\r\n  closeOnTap?: boolean;\r\n};\r\n\r\nexport type GestureHandlerProps = {\r\n  children: React.ReactElement | React.ReactElement[] | React.ReactNode;\r\n};\r\n"],"mappings":""}