{"version":3,"sources":["MenuItem.tsx"],"names":["AnimatedTouchable","Animated","createAnimatedComponent","TouchableOpacity","MenuItemComponent","item","isLast","state","theme","menuProps","borderStyles","borderBottomColor","value","BORDER_DARK_COLOR","BORDER_LIGHT_COLOR","borderBottomWidth","textColor","color","isTitle","isDestructive","handleOnPress","params","actionParams","text","onPress","CONTEXT_MENU_STATE","END","styles","menuItem","menuItemTitleText","menuItemText","icon","AnimatedIcon","withSeparator","MenuItem","React","memo","isEqual"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA,MAAMA,iBAAiB,GAAGC,+BAASC,uBAAT,CAAiCC,6BAAjC,CAA1B;;AAOA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA8C;AACtE,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,MAA8B,yBAApC;AAEA,QAAMC,YAAY,GAAG,6CAAiB,MAAM;AAC1C,UAAMC,iBAAiB,GACrBH,KAAK,CAACI,KAAN,KAAgB,MAAhB,GAAyBC,6BAAzB,GAA6CC,8BAD/C;AAGA,WAAO;AACLH,MAAAA,iBADK;AAELI,MAAAA,iBAAiB,EAAET,MAAM,GAAG,CAAH,GAAO;AAF3B,KAAP;AAID,GARoB,EAQlB,CAACE,KAAD,EAAQF,MAAR,EAAgBD,IAAhB,CARkB,CAArB;AAUA,QAAMW,SAAS,GAAG,6CAAiB,MAAM;AACvC,WAAO;AAAEC,MAAAA,KAAK,EAAE,4BAASZ,IAAI,CAACa,OAAd,EAAuBb,IAAI,CAACc,aAA5B,EAA2CX,KAAK,CAACI,KAAjD;AAAT,KAAP;AACD,GAFiB,EAEf,CAACJ,KAAD,EAAQH,IAAR,CAFe,CAAlB;AAIA,QAAMe,aAAa,GAAG,wBAAY,MAAM;AACtC,QAAI,CAACf,IAAI,CAACa,OAAV,EAAmB;AACjB,YAAMG,MAAM,GAAGZ,SAAS,CAACG,KAAV,CAAgBU,YAAhB,CAA6BjB,IAAI,CAACkB,IAAlC,KAA2C,EAA1D;AACA,UAAIlB,IAAI,CAACmB,OAAT,EAAkBnB,IAAI,CAACmB,OAAL,CAAa,GAAGH,MAAhB;AAClBd,MAAAA,KAAK,CAACK,KAAN,GAAca,8BAAmBC,GAAjC;AACD;AACF,GANqB,EAMnB,CAACnB,KAAD,EAAQF,IAAR,CANmB,CAAtB;AAQA,sBACE,yEACE,6BAAC,iBAAD;AACE,IAAA,OAAO,EAAEe,aADX;AAEE,IAAA,aAAa,EAAE,CAACf,IAAI,CAACa,OAAN,GAAgB,GAAhB,GAAsB,CAFvC;AAGE,IAAA,KAAK,EAAE,CAACS,gBAAOC,QAAR,EAAkBlB,YAAlB;AAHT,kBAKE,6BAAC,8BAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACLL,IAAI,CAACa,OAAL,GAAeS,gBAAOE,iBAAtB,GAA0CF,gBAAOG,YAD5C,EAELd,SAFK;AADT,KAMGX,IAAI,CAACkB,IANR,CALF,EAaG,CAAClB,IAAI,CAACa,OAAN,IACCb,IAAI,CAAC0B,IADN,KAEEC,0BAAgB,OAAO3B,IAAI,CAAC0B,IAAZ,KAAqB,QAArC,gBACC,6BAAC,sBAAD;AAAc,IAAA,IAAI,EAAE1B,IAAI,CAAC0B,IAAzB;AAA+B,IAAA,IAAI,EAAE,EAArC;AAAyC,IAAA,KAAK,EAAEf;AAAhD,IADD,GAEG,OAAOX,IAAI,CAAC0B,IAAZ,KAAqB,UAArB,GACF1B,IAAI,CAAC0B,IAAL,EADE,GAEA,IANL,CAbH,CADF,EAsBG1B,IAAI,CAAC4B,aAAL,iBAAsB,6BAAC,kBAAD,OAtBzB,CADF;AA0BD,CAnDD;;AAqDA,MAAMC,QAAQ,gBAAGC,eAAMC,IAAN,CAAWhC,iBAAX,EAA8BiC,eAA9B,CAAjB;;eACeH,Q","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { TouchableOpacity } from \"react-native\";\r\nimport Animated, { useAnimatedStyle } from \"react-native-reanimated\";\r\n\r\nimport Separator from \"./Separator\";\r\nimport styles from \"./styles\";\r\n\r\nimport { MenuItemProps } from \"./types\";\r\nimport { useInternal } from \"../../hooks\";\r\nimport { CONTEXT_MENU_STATE } from \"../../constants\";\r\nimport { BORDER_LIGHT_COLOR, BORDER_DARK_COLOR } from \"./constants\";\r\nimport isEqual from \"lodash.isequal\";\r\nimport { getColor } from \"./calculations\";\r\nimport { AnimatedIcon } from \"../provider/Provider\";\r\n\r\n// @ts-ignore\r\nconst AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);\r\n\r\ntype MenuItemComponentProps = {\r\n  item: MenuItemProps;\r\n  isLast?: boolean;\r\n};\r\n\r\nconst MenuItemComponent = ({ item, isLast }: MenuItemComponentProps) => {\r\n  const { state, theme, menuProps } = useInternal();\r\n\r\n  const borderStyles = useAnimatedStyle(() => {\r\n    const borderBottomColor =\r\n      theme.value === \"dark\" ? BORDER_DARK_COLOR : BORDER_LIGHT_COLOR;\r\n\r\n    return {\r\n      borderBottomColor,\r\n      borderBottomWidth: isLast ? 0 : 1,\r\n    };\r\n  }, [theme, isLast, item]);\r\n\r\n  const textColor = useAnimatedStyle(() => {\r\n    return { color: getColor(item.isTitle, item.isDestructive, theme.value) };\r\n  }, [theme, item]);\r\n\r\n  const handleOnPress = useCallback(() => {\r\n    if (!item.isTitle) {\r\n      const params = menuProps.value.actionParams[item.text] || [];\r\n      if (item.onPress) item.onPress(...params);\r\n      state.value = CONTEXT_MENU_STATE.END;\r\n    }\r\n  }, [state, item]);\r\n\r\n  return (\r\n    <>\r\n      <AnimatedTouchable\r\n        onPress={handleOnPress}\r\n        activeOpacity={!item.isTitle ? 0.4 : 1}\r\n        style={[styles.menuItem, borderStyles]}\r\n      >\r\n        <Animated.Text\r\n          style={[\r\n            item.isTitle ? styles.menuItemTitleText : styles.menuItemText,\r\n            textColor,\r\n          ]}\r\n        >\r\n          {item.text}\r\n        </Animated.Text>\r\n        {!item.isTitle &&\r\n          item.icon &&\r\n          (AnimatedIcon && typeof item.icon === \"string\" ? (\r\n            <AnimatedIcon name={item.icon} size={18} style={textColor} />\r\n          ) : typeof item.icon === \"function\" ? (\r\n            item.icon()\r\n          ) : null)}\r\n      </AnimatedTouchable>\r\n      {item.withSeparator && <Separator />}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MenuItem = React.memo(MenuItemComponent, isEqual);\r\nexport default MenuItem;\r\n"]}