{"version":3,"sources":["Backdrop.tsx"],"names":["AnimatedBlurView","Animated","createAnimatedComponent","BlurView","BackdropComponent","blurViewIntensity","backdropDarkBackgroundColor","BACKDROP_DARK_BACKGROUND_COLOR","backdropLightBackgroundColor","BACKDROP_LIGHT_BACKGROUND_COLOR","state","theme","tapGestureEvent","onStart","event","context","startPosition","x","y","onCancel","value","CONTEXT_MENU_STATE","END","onEnd","distance","Math","hypot","shouldClose","isStateActive","ACTIVE","animatedContainerStyle","topValueAnimation","HOLD_ITEM_TRANSFORM_DURATION","WINDOW_HEIGHT","duration","opacityValueAnimation","top","opacity","animatedContainerProps","intensity","animatedInnerContainerStyle","backgroundColor","styles","container","StyleSheet","absoluteFillObject","Backdrop"],"mappings":"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","sourcesContent":["import React, { memo } from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport Animated, {\r\n  useAnimatedGestureHandler,\r\n  useAnimatedProps,\r\n  useAnimatedStyle,\r\n  withDelay,\r\n  withTiming,\r\n} from \"react-native-reanimated\";\r\nimport {\r\n  TapGestureHandler,\r\n  TapGestureHandlerGestureEvent,\r\n} from \"react-native-gesture-handler\";\r\n\r\n// Components\r\nimport { BlurView } from \"expo-blur\";\r\n\r\n// Utils\r\nimport { styles } from \"./styles\";\r\nimport {\r\n  CONTEXT_MENU_STATE,\r\n  HOLD_ITEM_TRANSFORM_DURATION,\r\n  WINDOW_HEIGHT,\r\n} from \"../../constants\";\r\nimport {\r\n  BACKDROP_LIGHT_BACKGROUND_COLOR,\r\n  BACKDROP_DARK_BACKGROUND_COLOR,\r\n} from \"./constants\";\r\nimport { useInternal } from \"../../hooks\";\r\nimport { BackdropProps } from \"../provider/types\";\r\n\r\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\r\n\r\ntype Context = {\r\n  startPosition: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n};\r\n\r\nconst BackdropComponent = ({\r\n  blurViewIntensity = 100,\r\n  backdropDarkBackgroundColor = BACKDROP_DARK_BACKGROUND_COLOR,\r\n  backdropLightBackgroundColor = BACKDROP_LIGHT_BACKGROUND_COLOR,\r\n}: BackdropProps) => {\r\n  const { state, theme } = useInternal();\r\n\r\n  const tapGestureEvent = useAnimatedGestureHandler<\r\n    TapGestureHandlerGestureEvent,\r\n    Context\r\n  >(\r\n    {\r\n      onStart: (event, context) => {\r\n        context.startPosition = { x: event.x, y: event.y };\r\n      },\r\n      onCancel: () => {\r\n        state.value = CONTEXT_MENU_STATE.END;\r\n      },\r\n      onEnd: (event, context) => {\r\n        const distance = Math.hypot(\r\n          event.x - context.startPosition.x,\r\n          event.y - context.startPosition.y\r\n        );\r\n        const shouldClose = distance < 10;\r\n        const isStateActive = state.value === CONTEXT_MENU_STATE.ACTIVE;\r\n\r\n        if (shouldClose && isStateActive) {\r\n          state.value = CONTEXT_MENU_STATE.END;\r\n        }\r\n      },\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const animatedContainerStyle = useAnimatedStyle(() => {\r\n    const topValueAnimation = () =>\r\n      state.value === CONTEXT_MENU_STATE.ACTIVE\r\n        ? 0\r\n        : withDelay(\r\n            HOLD_ITEM_TRANSFORM_DURATION,\r\n            withTiming(WINDOW_HEIGHT, {\r\n              duration: 0,\r\n            })\r\n          );\r\n\r\n    const opacityValueAnimation = () =>\r\n      withTiming(state.value === CONTEXT_MENU_STATE.ACTIVE ? 1 : 0, {\r\n        duration: HOLD_ITEM_TRANSFORM_DURATION,\r\n      });\r\n\r\n    return {\r\n      top: topValueAnimation(),\r\n      opacity: opacityValueAnimation(),\r\n    };\r\n  });\r\n\r\n  const animatedContainerProps = useAnimatedProps(() => {\r\n    return {\r\n      intensity: withTiming(\r\n        state.value === CONTEXT_MENU_STATE.ACTIVE ? blurViewIntensity : 0,\r\n        {\r\n          duration: HOLD_ITEM_TRANSFORM_DURATION,\r\n        }\r\n      ),\r\n    };\r\n  });\r\n\r\n  const animatedInnerContainerStyle = useAnimatedStyle(() => {\r\n    const backgroundColor =\r\n      theme.value === \"light\"\r\n        ? backdropLightBackgroundColor\r\n        : backdropDarkBackgroundColor;\r\n\r\n    return { backgroundColor };\r\n  }, [theme]);\r\n\r\n  return (\r\n    <TapGestureHandler onHandlerStateChange={tapGestureEvent}>\r\n      <AnimatedBlurView\r\n        // @ts-ignore\r\n        tint=\"default\"\r\n        animatedProps={animatedContainerProps}\r\n        style={[styles.container, animatedContainerStyle]}\r\n      >\r\n        <Animated.View\r\n          style={[\r\n            { ...StyleSheet.absoluteFillObject },\r\n            animatedInnerContainerStyle,\r\n          ]}\r\n        />\r\n      </AnimatedBlurView>\r\n    </TapGestureHandler>\r\n  );\r\n};\r\n\r\nconst Backdrop = memo(BackdropComponent);\r\n\r\nexport default Backdrop;\r\n"]}